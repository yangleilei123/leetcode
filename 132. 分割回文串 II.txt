132. 分割回文串 II
给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是回文。

返回符合要求的 最少分割次数 。

 

示例 1：

输入：s = "aab"
输出：1
解释：只需一次分割就可将 s 分割成 ["aa","b"] 这样两个回文子串。
示例 2：

输入：s = "a"
输出：0
示例 3：

输入：s = "ab"
输出：1
 

提示：

1 <= s.length <= 2000
s 仅由小写英文字母组成


class Solution {
public:

    int minCut(string s) {
        int n = s.size();
        //dp[i]代表0~i最小分割次数，如果区间[j+1, i]是回文的话，那么dp[i] = dp[j] + 1; 所以dp[i] = min(dp[i], dp[j] + 1);
        vector<int> dp(n + 1);
        for(int i = 0; i < n; i++)  dp[i] = i;
        for(int i = 0; i < n; i++){
            helper(s, i, i, dp);
            helper(s, i, i + 1, dp);
        }
        return dp[n - 1];
    }
    void helper(string& s, int l, int r, vector<int>& dp){
        while(l >= 0 && r < s.size()){
            if(s[l] == s[r]){
                dp[r] = min(dp[++r], dp[l--] + 1);
            }else return;
        }
    }
};



//dp[i]代表0~i最小分割次数, dp[i] = min(dp[i], dp[j] + 1);
class Solution {
public:
    int minCut(string s) {
        int n = s.size();
        vector<vector<bool>> dp1(n, vector<bool>(n, true));  //辅助数组
        vector<int> dp(n, n);
        for(int i = n - 1; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                dp1[i][j] = (s[i] == s[j]) && dp1[i + 1][j - 1];  
            }
        }
        for(int i = 0; i < n; i++){
            if(dp1[0][i])   dp[i] = 0;   					//不需要分割 所以是0
            else{
                for(int j = 0; j < i; j++){
                    if(dp1[j + 1][i])						//如果满足回文，则进行状态转移
                        dp[i] = min(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[n - 1];
    }
};