给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。

示例 1:

输入: [1,2,1]
输出: [2,-1,2]
解释: 第一个 1 的下一个更大的数是 2；
数字 2 找不到下一个更大的数； 
第二个 1 的下一个最大的数需要循环搜索，结果也是 2。
注意: 输入数组的长度不会超过 10000。

解题思路：利用单调栈，维护一个单调递增的栈
1、如果栈顶元素小于当前值，则更新节点答案，弹出栈
2、否则就压入栈
3、注意边界。

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        vector<int> res(nums.size(), -1);
        stack<int> st;
        for(int i = 0; i < nums.size()*2; i++){
            int num = nums[i % nums.size()];
            while(!st.empty() && nums[st.top()] < num){
                res[st.top()] = num;
                st.pop();
            }
            if(i < nums.size()) st.push(i);
        }
        return res;
    }
};