61. 旋转链表
给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。

 

示例 1：


输入：head = [1,2,3,4,5], k = 2
输出：[4,5,1,2,3]
示例 2：


输入：head = [0,1,2], k = 4
输出：[2,0,1]
 

提示：

链表中节点的数目在范围 [0, 500] 内
-100 <= Node.val <= 100
0 <= k <= 2 * 109


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head == nullptr || k == 0 || head->next == nullptr)  return head;
        ListNode* cur = head;
        int cnt = 1;
        while(cur->next){
            cnt++;
            cur = cur->next;
        }
        k = k % cnt;
        if(k == 0)  return head;
        cur->next = head;
        for(int i = 0; i < cnt - k; i++)    cur = cur->next;
        ListNode* dummy = cur->next;
        cur->next = nullptr;
        return dummy;
    }
};